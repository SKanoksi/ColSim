#version 430 core
layout (points) in;
layout (triangle_strip, max_vertices = 42) out;

in VS_OUT {
    vec3 vel ;
} gs_in[];

out float speed ;

uniform mat4 Trans ;
uniform float Size ;

void drawCone3D(vec3 head, vec3 base, float R, vec3 pos)
{
    vec3 dir = normalize(head-base);
    vec3 ortho1 =  vec3(-dir.y, dir.x, 0.0);
    vec3 ortho2 = cross(dir, ortho1);
    vec3 r1 = R*normalize(ortho1) ;
    vec3 r2 = R*normalize(ortho2) ;

    const float cos30 = 0.8660254f ;
    const float sin30 = 0.5f   ;

    // Start drawing: -- fixed 12-angle circular base
    // Note: passing vec3 to gl_position, the fourth component will be set to 1.0
    // For speed upt
    vec4 tip = Trans*vec4(pos + head, 1.0f) ; // Actual head position
    base = pos + base ;            // Actual base position

    // To read this algorithm, ignore gl_Position = head; and EmitVertex(); at first
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1*cos30 + r2*sin30, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1*sin30 + r2*cos30, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r2, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r1*sin30 + r2*cos30, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r1*cos30 + r2*sin30, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r1, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r1*cos30 - r2*sin30, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r1*sin30 - r2*cos30, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base - r2, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1*sin30 - r2*cos30, 1.0f) ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1*cos30 - r2*sin30, 1.0f) ;
    EmitVertex();
    gl_Position = tip ;
    EmitVertex();
    gl_Position = Trans*vec4(base + r1, 1.0f) ;
    EmitVertex();

    // Additional flush to head for the next cone
    gl_Position = tip ;
    EmitVertex();
}

void createArrow3D(vec3 pos, vec3 L)
{
    float R = Size/173.2 ;
    drawCone3D(L,                0.6*L,   2*R,  pos);
    drawCone3D(L,  vec3(0.0f,0.0f,0.0f),    R,  pos);
    EndPrimitive();
}

void main()
{
    speed = length(gs_in[0].vel) ;
    vec3 arrow = 12*gl_in[0].gl_Position.w*Size*vec3(gs_in[0].vel/speed) ;
    createArrow3D(gl_in[0].gl_Position.xyz, arrow);
}
